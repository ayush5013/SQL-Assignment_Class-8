*********************** TABLE ************************

CREATE TABLE loan_payments (
loan_id INT,
customer_id INT,
customer_name VARCHAR(100),
payment_date DATE,
payment_amount DECIMAL(10, 2)
);

INSERT INTO loan_payments (loan_id, customer_id, customer_name, payment_date,
payment_amount)
VALUES
(1, 101, 'Rajesh Kumar', '2024-01-05', 500.00),
(1, 102, 'Pooja Singh', '2024-01-15', 450.00),
(2, 103, 'Amit Sharma', '2024-02-10', 700.00),
(2, 104, 'Rina Das', '2024-02-28', 320.00),
(3, 105, 'Vikram Mehta', '2024-03-01', 600.00),
(3, 106, 'Priya Rao', '2024-03-18', 800.00),
(4, 107, 'Anil Gupta', '2024-04-05', 500.00),
(4, 108, 'Neha Verma', '2024-04-20', 450.00),
(5, 109, 'Sunil Yadav', '2024-05-07', 700.00),
(5, 110, 'Kavita Bhatia', '2024-05-15', 320.00),
(6, 111, 'Manoj Tiwari', '2024-06-01', 600.00),

(6, 112, 'Smita Roy', '2024-06-18', 800.00),
(7, 113, 'Arjun Nair', '2024-07-05', 500.00),
(7, 114, 'Meera Iyer', '2024-07-20', 450.00),
(8, 115, 'Nikhil Kapoor', '2024-08-10', 700.00),
(8, 116, 'Anjali Jain', '2024-08-25', 320.00),
(9, 117, 'Rakesh Mishra', '2024-09-01', 600.00),
(9, 118, 'Deepa Kulkarni', '2024-09-18', 800.00),
(10, 119, 'Suresh Patil', '2024-10-05', 500.00),
(10, 120, 'Sheetal Desai', '2024-10-20', 450.00),
(11, 121, 'Ravi Shankar', '2024-11-10', 700.00),
(11, 122, 'Divya Nair', '2024-11-28', 320.00),
(12, 123, 'Ajay Chauhan', '2024-12-01', 600.00),
(12, 124, 'Sneha Menon', '2024-12-15', 800.00),
(1, 125, 'Harish Pandey', '2024-01-25', 550.00),
(2, 126, 'Geeta Sharma', '2024-02-18', 410.00),
(3, 127, 'Rohit Nanda', '2024-03-28', 730.00),
(4, 128, 'Pallavi Saxena', '2024-04-10', 620.00),
(5, 129, 'Arvind Rao', '2024-05-20', 460.00),
(6, 130, 'Komal Aggarwal', '2024-06-25', 910.00),
(7, 131, 'Aditya Malhotra', '2024-07-15', 720.00),
(8, 132, 'Seema Kaur', '2024-08-30', 630.00),
(9, 133, 'Shivam Bhardwaj', '2024-09-05', 520.00),
(10, 134, 'Meghna Reddy', '2024-10-25', 730.00),
(11, 135, 'Rahul Jain', '2024-11-15', 690.00),
(12, 136, 'Aarti Tandon', '2024-12-20', 810.00),
(2, 137, 'Naina Deshmukh', '2024-02-05', 320.00),

(4, 138, 'Lakshmi Iyer', '2024-04-01', 670.00),
(6, 139, 'Santosh Shetty', '2024-06-10', 480.00),
(8, 140, 'Varun Dhawan', '2024-08-15', 510.00),
(10, 141, 'Bhavana Joshi', '2024-10-07', 650.00),
(1, 142, 'Ashok Pillai', '2024-01-20', 600.00),
(3, 143, 'Preeti Sharma', '2024-03-05', 470.00),
(5, 144, 'Dinesh Ahuja', '2024-05-25', 560.00),
(7, 145, 'Simran Kaur', '2024-07-10', 390.00),
(9, 146, 'Ganesh Iyer', '2024-09-20', 580.00);

************* DATES - Solutions **************

--Q1 Retrieve the current system date, time, and timestamp.
select current_date , current_time , current_timestamp ;

-- Q2 Retrieve the year, month, and day from the StartDate of each event.
select startdate , extract('Year' from startdate) as Year , extract('Month' from startdate) as Month ,
extract('day' from startdate) as Day from EventManagement;

-- Q3 Get the day name, month name, and year from a Date
SELECT startdate , 
    TO_CHAR(startdate, 'Day') AS day_name,
    TO_CHAR(startdate, 'Month') AS month_name,
    TO_CHAR(startdate, 'YYYY') AS year
FROM eventmanagement; 

-- Q4 Calculate how many days are left until the registration deadline for each event.
select * from eventmanagement;
select registrationdeadline , lastupdate , ( registrationdeadline - lastupdate ) as timeremaining 
from eventmanagement;

-- Q5 Retrieve events where the RegistrationDeadline has already passed.
select current_date;
select eventname , registrationdeadline , current_date  from eventmanagement
where registrationdeadline < current_date; 

-- Q6 Find the registration deadlines extended by 5 days
select * from eventmanagement where registrationdeadline >= lastupdate + interval '5 Day';



-- Q8 Find the day of the week for the StartDate of each event.
select eventname , startdate , to_char(startdate , 'Day') as Day from eventmanagement;

-- Q9 Convert a string 2024-12-15 to a date and calculate how many days it is from today.
 
select current_date ,to_date('2024-12-15' , 'YYYY-MM-DD') as date,
current_date - (to_date('2024-12-15' , 'YYYY-MM-DD')) as daydiff;

-- Q10 Format the StartDate in DD-MM-YYYY format for display purposes.
select to_char(startdate , 'DD-MM-YYYY') as day from eventmanagement;

-- Q11 Retrieve events that will take place in December 2024.
select eventname from eventmanagement where date_trunc('Month',startdate) = '2024-12-01';

-- Q12 Find the total number of registrations for events happening in the same month.
select  sum(totalregistrations) , date_trunc('month' , startdate) as month from eventmanagement
group by date_trunc('month' , startdate) order by month ;

************** SQL- Practice Solutions *****************

--Q1 Calculate the total payments made in each quarter of 2024 and determine the percentage
contribution of each quarter to the yearly total.

select  case
when extract(month from payment_date) in (1,2,3) then 'Q1'
when extract(month from payment_date) in (4,5,6) then 'Q2'
when extract(month from payment_date) in (7,8,9) then 'Q3'
else 'Q4' end as Quarter , sum(payment_amount) , 
sum(payment_amount)*100/(select sum(payment_amount) from loan_payments) from loan_payments group by quarter;


-- Q2 Calculate the total payment amount for each month in the year 2024. Classify the payment totals
into three categories:
1.Low: If the total payment amount is less than ₹2000.
2.Moderate: If the total payment amount is between ₹2000 and ₹2500.
3.High: If the total payment amount is greater than ₹2500. 

Query should group the data by month and display the following columns:

1.Month start date.
2.Total payment amount.
3.Payment category (Low, Moderate, High).
4. Month Label

SELECT to_char(date_trunc('month', payment_date),'Month') AS month, SUM(payment_amount) AS month_total , 
case when SUM(payment_amount) <2000 then 'Low'
when SUM(payment_amount) >2000 and SUM(payment_amount)< 2500 then 'medium' 
else 'high' end as Payment_category 
FROM 
loan_payments GROUP BY date_trunc('month', payment_date) ORDER BY month_total;


-- Q3 Calculate and compare the total sales made during the first 5 days and the last 5 days of each month
in 2024. The output should include:
1.Month start date.
2.Total sales for the first 5 days.
3.Total sales for the last 5 days.
4.Indicate whether the first 5 days' sales were higher, lower, or equal to the last 5 days' sales.

SELECT 
    t1.month AS month,
    t1.sum_amount AS sum_first_5_days,
    t2.sum_amount AS sum_last_5_days from (
select date_trunc('Month',payment_date) as month  , sum(payment_amount) as sum_amount from loan_payments
where payment_date >=date_trunc('Month',payment_date) and 
(payment_date < date_trunc('Month',payment_date) + interval '5 Day')
 group by date_trunc('Month',payment_date) order by month) t1  
inner join 
(select date_trunc('Month',payment_date) as month  , sum(payment_amount) as sum_amount from loan_payments
where payment_date >=date_trunc('Month',payment_date) + interval '1 Month' - interval '5 day' and 
(payment_date < date_trunc('Month',payment_date) + interval '1 Month')
 group by date_trunc('Month',payment_date) order by month) t2 
 ON t1.month = t2.month
ORDER BY t1.month;
